define USAGE
Usage: make [command] [VARIABLES]

all....... Build the binaries
debug..... Build a .map and .lst file.  Useful for seeing what's going on
           behind the scenes.
burn ..... Write firmware to chip using a regular serial port
getips ... Get a list with IPs of esp82xxs connected to your network
pitcher .. Burns program that sends request and times it's arrival
bouncer .. Burns program that returns the packet as soon as it gets it


More commands: all, clean, purge, dumprom
endef

.PHONY : all clean cleanall netburn burnweb burn $(BIN_TARGET) netweb getips help

FW_FILE1 = image.elf-0x00000.bin
FW_FILE2 = image.elf-0x40000.bin
TARGET = image.elf

SRCS =  esp82xx/fwsrc/uart.c \
	esp82xx/fwsrc/esp82xxutil.c \
	esp82xx/fwsrc/flash_rewriter.c \
	esp82xx/fwsrc/http.c \
	esp82xx/fwsrc/commonservices.c \
	esp82xx/fwsrc/http_custom.c \
	esp82xx/fwsrc/mdns.c \
	esp82xx/fwsrc/mfs.c \
	user/custom_commands.c 

LIBS = main lwip ssl upgrade net80211 wpa phy lwip crypto
ifneq ($(CUSTOMPP), 1)
	LIBS += pp
endif

INCL = $(SDK)/include esp82xx/include .
LINKERSCRIPT ?= $(SDK)/ld/eagle.app.v6.ld

CFLAGS = -mlongcalls -Os $(addprefix -I,$(INCL) $(call uniq, $(patsubst %/,%,$(dir $(SRCS))))) $(OPTS) -DVERSSTR='$(VERSSTR)'

LDFLAGS_CORE = -Wl,--relax -Wl,--gc-sections -nostdlib -L$(XTLIB) \
	-L$(XTGCCLIB) $(addprefix $(SDK)/lib/lib,$(addsuffix .a,$(LIBS))) \
	$(XTGCCLIB) -T $(LINKERSCRIPT)
#	-flto -Wl,--relax -Wl,--gc-sections

LINKFLAGS = $(LDFLAGS_CORE) -B$(XTLIB) $(LDFLAGS_POST)

BIN_TARGET = $(PROJECT_NAME)-$(VERSION)-binaries.zip

ifneq (,$(findstring -DDEBUG,$(OPTS)))
$(warning Debug is enabled!)
FLASH_WRITE_FLAGS += --verify
endif

##########################################################################RULES

help :
	$(info $(value USAGE))
	@true

$(FW_FILE1) $(FW_FILE2) : $(TARGET)
	PATH=$(PATH):$(FOLDERPREFIX) $(ESPTOOL_PY) elf2image $(TARGET)
	@#no need to set things like dout, and memory size.  This data is copied from the ESP back to itself on write.

$(TARGET) : $(SRCS) Makefile
	$(CC) $(CFLAGS) $(SRCS) -flto $(LINKFLAGS) -o $@

debug : $(TARGET)
	nm -S -n $(TARGET) > image.map
	$(PREFIX)objdump -S $(TARGET) > image.lst
	$(PREFIX)size -A $(TARGET) | grep -v debug

pitcher: SRCS += user/user_main_pitcher.c
pitcher: $(FW_FILE1) $(FW_FILE2)
	$(info NOTICE: Currently burning for ESP8266.  If you are on an '85 reconfigure CHIP.)
	($(ESPTOOL_PY) $(FWBURNFLAGS) --port $(PORT) write_flash -fm dio $(FLASH_WRITE_FLAGS) 0x00000 $(FW_FILE1) 0x40000 $(FW_FILE2))||(true)

bouncer: SRCS += user/user_main_bouncer.c
bouncer: $(FW_FILE1) $(FW_FILE2)
	$(info NOTICE: Currently burning for ESP8266.  If you are on an '85 reconfigure CHIP.)
	($(ESPTOOL_PY) $(FWBURNFLAGS) --port $(PORT) write_flash -fm dio $(FLASH_WRITE_FLAGS) 0x00000 $(FW_FILE1) 0x40000 $(FW_FILE2))||(true)


burn : $(FW_FILE1) $(FW_FILE2)
	$(info NOTICE: Currently burning for ESP8266.  If you are on an '85 reconfigure CHIP.)
	($(ESPTOOL_PY) $(FWBURNFLAGS) --port $(PORT) write_flash -fm dio $(FLASH_WRITE_FLAGS) 0x00000 $(FW_FILE1) 0x40000 $(FW_FILE2))||(true)

$(BIN_TARGET): $(FW_FILE1) $(FW_FILE2)
	@cd web \
	 && $(MAKE) $(MFLAGS) $(MAKEOVERRIDES) page.mpfs \
	 && $(MAKE) $(MFLAGS) $(MAKEOVERRIDES) execute_reflash \
	 && $(MAKE) $(MFLAGS) $(MAKEOVERRIDES) pushtodev \
	 && cd ..
	zip $@ $(FW_FILE1) $(FW_FILE2) web/execute_reflash web/mfsmaker web/pushtodev web/page.mpfs

getips:
	$(info Detecting possible IPs for ESP82XX modules...)
	$(info Needs 'nmap' and takes some time especiallay if none are connected)
	sudo nmap -sP 192.168.0.0/24 | grep -iP "espressif|esp" -B2 | grep -oP "(\d{1,3}\.){3,3}\d\d{1,3}"

clean :
	$(RM) $(patsubst %.S,%.o,$(patsubst %.c,%.o,$(SRCS))) $(TARGET) image.map image.lst $(CLEAN_EXTRA)

dumprom :
	($(ESPTOOL_PY) $(FWBURNFLAGS)  --port $(PORT) read_flash 0 1048576 dump.bin)||(true)

purge : clean
	@cd web && $(MAKE) $(MFLAGS) $(MAKEOVERRIDES) clean
	$(RM) $(FW_FILE1) $(FW_FILE2) $(BIN_TARGET)

bump_submodule :
	cd esp82xx; git pull origin master; cd ..

